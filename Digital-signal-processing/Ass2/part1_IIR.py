import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig

Input_1kHz_15kHz_raw = [

    +0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +
    1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
    +0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +
    0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
    +0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +
    1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
    -0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -
    1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
    -0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -
    0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
    -0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -
    1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
    +0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +
    1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
    +0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +
    0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
    +0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +
    1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
    +0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -
    1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
    -0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -
    0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
    -0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -
    1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
    +0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +
    1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
    +0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +
    0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
    +0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +
    1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
    +0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -
    1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
    -0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -
    0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
    -0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -
    1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
    -0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +
    1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
    +0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +
    0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
    +0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +
    1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
    -0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -
    1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
    -0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -
    0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
    -0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -
    1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
    +0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +
    1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
    +0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +
    0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
    +0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +
    1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
    +0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -
    1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
    -0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -
    0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
    -0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -
    1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
    -0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +
    1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
    +0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +
    0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
    +0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +
    1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
    +0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -
    1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
    -0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -
    0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
    -0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -
    1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
    -0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +
    1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
    +0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +
    0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
    +0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +
    1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
    +0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -
    1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
]

Input_1kHz_15kHz = np.array(Input_1kHz_15kHz_raw)

# Create Chebyshev, Butterworth and Bessel filters with the same order and cutoff frequency

order = 5
cutoff = 1000
fs = 48000

b_cherby, a_cherby = sig.cheby1(order, 0.1, cutoff, 'low', analog=False, fs=fs)
cheby_1kHz = sig.lfilter(b_cherby, a_cherby, Input_1kHz_15kHz)

b_butter, a_butter = sig.butter(order, cutoff, 'low', analog=False, fs=fs)
butter_1kHz = sig.lfilter(b_butter, a_butter, Input_1kHz_15kHz)

b_bessel, a_bessel = sig.bessel(order, cutoff, 'low', analog=False, fs=fs)
bessel_1kHz = sig.lfilter(b_bessel, a_bessel, Input_1kHz_15kHz)


# # Plot the filter frequency responses of cherry, butter and bessel filters in rows of 3 subplots
# fig, axs = plt.subplots(3, 1, figsize=(10, 8), sharex=True, sharey=True)
# fig.suptitle('Fig.6: IIR Comparison of Chebyshev, Butterworth and Bessel filters responses')
# w, h = sig.freqz(b_cherby, a_cherby)
# axs[0].plot(w, 20 * np.log10(abs(h)), 'r')
# axs[0].set_title('Chebyshev filter')
# w, h = sig.freqz(b_butter, a_butter)
# axs[1].plot(w, 20 * np.log10(abs(h)), 'b')
# axs[1].set_title('Butterworth filter')
# w, h = sig.freqz(b_bessel, a_bessel)
# axs[2].plot(w, 20 * np.log10(abs(h)), 'g')
# axs[2].set_title('Bessel filter')
# plt.tight_layout()
# plt.show()

# Plot the phase responses of the cherry, butter and bessel filter in rows of subplots
fig, axs = plt.subplots(3, 1, figsize=(10, 8), sharex=True, sharey=True)
fig.suptitle('IIR Comparison of Chebyshev, Butterworth and Bessel filters phase responses')
w, h = sig.freqz(b_cherby, a_cherby)
axs[0].plot(w, np.unwrap(np.angle(h)), 'r')
axs[0].set_title('Chebyshev filter')
w, h = sig.freqz(b_butter, a_butter)
axs[1].plot(w, np.unwrap(np.angle(h)), 'b')
axs[1].set_title('Butterworth filter')
w, h = sig.freqz(b_bessel, a_bessel)
axs[2].plot(w, np.unwrap(np.angle(h)), 'g')
axs[2].set_title('Bessel filter')
plt.tight_layout()
plt.show()



# # Plot the results in rows of 4 subplots
# fig, axs = plt.subplots(4, 1, figsize=(10, 8), sharex=True, sharey=True)
# fig.suptitle('Fig.7: IIR Comparison of Chebyshev, Butterworth and Bessel filters with order = 5 and cutoff = 1kHz in Time Domain')
# axs[0].plot(Input_1kHz_15kHz, 'k')
# axs[0].set_title('Input signal')
# axs[1].plot(cheby_1kHz, 'r')
# axs[1].set_title('Chebyshev filter')
# axs[2].plot(butter_1kHz, 'b')
# axs[2].set_title('Butterworth filter')
# axs[3].plot(bessel_1kHz, 'g')
# axs[3].set_title('Bessel filter')
# plt.tight_layout()
# plt.show()

# # Plot the results in rows of 4 subplots in the frequency domain after applying FFT
fig, axs = plt.subplots(4, 1, figsize=(10, 8), sharex=True, sharey=True)
fig.suptitle('Fig.8: IIR Comparison of Chebyshev, Butterworth and Bessel filters with order = 5 and cutoff = 1kHz in Frequency Domain')
axs[0].magnitude_spectrum(Input_1kHz_15kHz, Fs=fs, scale='dB', color='k')
axs[0].set_title('Input signal')
axs[1].magnitude_spectrum(cheby_1kHz, Fs=fs, scale='dB', color='r')
axs[1].set_title('Chebyshev filter')
axs[2].magnitude_spectrum(butter_1kHz, Fs=fs, scale='dB', color='b')
axs[2].set_title('Butterworth filter')
axs[3].magnitude_spectrum(bessel_1kHz, Fs=fs, scale='dB', color='g')
axs[3].set_title('Bessel filter')
plt.tight_layout()
plt.show()

